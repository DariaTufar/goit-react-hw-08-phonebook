{"version":3,"file":"static/js/941.e6a392d3.chunk.js","mappings":"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","sources":["components/Button.jsx","components/HeadingSection.jsx","components/Input.jsx","hooks/useMyToast.js","../node_modules/@chakra-ui/icons/dist/chunk-WQWU3AO7.mjs","pages/LogIn.jsx","../node_modules/@chakra-ui/icons/dist/chunk-JIJ6CQ2I.mjs"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Button as ButtonStyled } from '@chakra-ui/react';\n\nexport const Button = ({ type, children, isLoading, loadingText }) => {\n  return (\n    <ButtonStyled\n      type={type}\n      isLoading={isLoading}\n      loadingText={loadingText}\n      colorScheme=\"accent\"\n      color=\"brand.500\"\n      bg=\"yellow.300\"\n      fontWeight=\"bold\"\n      minW=\"10rem\"\n    >\n      {children}\n    </ButtonStyled>\n  );\n};\n\nButton.propTypes = {\n  type: PropTypes.string.isRequired,\n  children: PropTypes.node.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  loadingText: PropTypes.string.isRequired,\n};\n","import { Heading } from '@chakra-ui/react';\n\nexport const HeadingSection = ({ children, ...props }) => {\n  return (\n    <Heading\n      as=\"h1\"\n      fontSize=\"2xl\"\n      textAlign=\"center\"\n      color=\"brand.500\"\n      {...props}\n\n    >  \n      {children}\n    </Heading>\n  );\n};\n","import {\n  Input as InputChakra,\n  InputGroup,\n  InputLeftElement,\n} from '@chakra-ui/react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nexport const Input = ({ name = '', type = 'text', icon }) => {\n  return (\n    <InputGroup>\n      <InputLeftElement pointerEvents=\"none\" children={icon} />\n      <Field\n        as={InputChakra}\n        name={name}\n        type={type}\n        paddingLeft=\"9\"\n        fontSize=\"lg\"\n        fontWeight=\"bold\"\n        color=\"brand.600\"\n        variant=\"outline\"\n        bg=\"bg.100\"\n        borderColor=\"gray.400\"\n        focusBorderColor=\"brand.600\"\n      />\n    </InputGroup>\n  );\n};\n\nInput.propTypes = {\n  name: PropTypes.string,\n  type: PropTypes.string,\n  icon: PropTypes.node,\n};\n","import { useToast, Box } from '@chakra-ui/react';\n\nexport const useMyToast = () => {\n  const toast = useToast({\n    title: ``,\n    position: 'top-right',\n    duration: 5000,\n    isClosable: true,\n  });\n  return ({ description, status }) => {\n    toast({\n      render: () => (\n        <Box\n          color=\"white\"\n          p={3}\n          borderRadius=\"4\"\n          textAlign=\"center\"\n          bg={status === 'error' ? 'accent.500' : 'brand.500'}\n        >\n          {description}\n        </Box>\n      ),\n    });\n  };\n};\n","// src/View.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar ViewIcon = createIcon({\n  displayName: \"ViewIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.432,10.524C20.787,7.614,16.4,4.538,12,4.6,7.6,4.537,3.213,7.615.568,10.524a2.211,2.211,0,0,0,0,2.948C3.182,16.351,7.507,19.4,11.839,19.4h.308c4.347,0,8.671-3.049,11.288-5.929A2.21,2.21,0,0,0,23.432,10.524ZM7.4,12A4.6,4.6,0,1,1,12,16.6,4.6,4.6,0,0,1,7.4,12Z\" }),\n    /* @__PURE__ */ jsx(\"circle\", { cx: \"12\", cy: \"12\", r: \"2\" })\n  ] })\n});\n\nexport {\n  ViewIcon\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik } from 'formik';\nimport * as yup from 'yup';\nimport { EmailIcon, ViewIcon } from '@chakra-ui/icons';\nimport {\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  VStack,\n} from '@chakra-ui/react';\n\nimport { Button } from 'components/Button';\nimport { Input } from 'components/Input';\nimport { HeadingSection } from 'components/HeadingSection';\nimport { signInUser } from 'redux/operations';\nimport { selectors } from 'redux/selectors';\nimport { clearErrors } from 'redux/userSlice';\nimport { useMyToast } from 'hooks/useMyToast';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nlet schema = yup.object().shape({\n  email: yup.string().required('E-mail is required'),\n  password: yup.string().required('Password is required'),\n});\n\nconst LogIn = () => {\n  const dispatch = useDispatch();\n  const errorLogIn = useSelector(selectors.errorLogIn);\n  const fetchLogIn = useSelector(selectors.fetchLogIn);\n  const toast = useMyToast();\n\n  // ====================== Errors handle  ====================\n  useEffect(() => {\n    if (errorLogIn === 'ERR_BAD_REQUEST') {\n      toast({\n        description: 'Email or password is incorrect!',\n        status: 'error',\n      });\n    } else if (errorLogIn === 'ERR_NETWORK') {\n      toast({\n        description: 'Network Error! Check Internet connection!',\n        status: 'error',\n      });\n    }\n    dispatch(clearErrors());\n  }, [dispatch, errorLogIn, toast]);\n\n  // ==================== Submit handle ====================\n  const handleSubmit = ({ email, password }, { resetForm }) => {\n    dispatch(clearErrors());\n    dispatch(signInUser({ email, password }));\n    resetForm();\n  };\n\n  // ==================== return ====================\n  return (\n    <VStack\n      as=\"main\"\n      justify=\"start\"\n      align=\"stretch\"\n      spacing=\"6\"\n      flexGrow=\"1\"\n      px=\"16\"\n      py=\"10\"\n      bg=\"bg.50\"\n    >\n      <HeadingSection>Enter login data, please.</HeadingSection>\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={schema}\n      >\n        {({ handleSubmit, errors }) => {\n          return (\n            <form onSubmit={handleSubmit}>\n              <VStack spacing={7} mx=\"auto\" maxW=\"sm\">\n                {/* Email Input */}\n                <FormControl isInvalid={errors.email}>\n                  <FormLabel color=\"brand.600\" fontWeight=\"bold\">\n                    E-mail\n                  </FormLabel>\n                  <Input\n                    name=\"email\"\n                    type=\"text\"\n                    icon={<EmailIcon color=\"brand.100\" boxSize=\"7\" />}\n                  />\n                  <FormErrorMessage>{errors.email}</FormErrorMessage>\n                </FormControl>\n\n                {/* Password Input */}\n                <FormControl isInvalid={errors.password}>\n                  <FormLabel color=\"brand.600\" fontWeight=\"bold\">\n                    Password\n                  </FormLabel>\n                  <Input\n                    name=\"password\"\n                    type=\"password\"\n                    icon={<ViewIcon color=\"brand.100\" boxSize=\"7\" />}\n                  />\n                  <FormErrorMessage>{errors.password}</FormErrorMessage>\n                </FormControl>\n\n                <Button\n                  type=\"submit\"\n                  isLoading={fetchLogIn}\n                  loadingText=\"Logging\"\n                  \n                >\n                  Log in\n                </Button>\n              </VStack>\n            </form>\n          );\n        }}\n      </Formik>\n    </VStack>\n  );\n};\n\nexport default LogIn;\n","// src/Email.tsx\nimport { createIcon } from \"@chakra-ui/icon\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar EmailIcon = createIcon({\n  displayName: \"EmailIcon\",\n  path: /* @__PURE__ */ jsxs(\"g\", { fill: \"currentColor\", children: [\n    /* @__PURE__ */ jsx(\"path\", { d: \"M11.114,14.556a1.252,1.252,0,0,0,1.768,0L22.568,4.87a.5.5,0,0,0-.281-.849A1.966,1.966,0,0,0,22,4H2a1.966,1.966,0,0,0-.289.021.5.5,0,0,0-.281.849Z\" }),\n    /* @__PURE__ */ jsx(\"path\", { d: \"M23.888,5.832a.182.182,0,0,0-.2.039l-6.2,6.2a.251.251,0,0,0,0,.354l5.043,5.043a.75.75,0,1,1-1.06,1.061l-5.043-5.043a.25.25,0,0,0-.354,0l-2.129,2.129a2.75,2.75,0,0,1-3.888,0L7.926,13.488a.251.251,0,0,0-.354,0L2.529,18.531a.75.75,0,0,1-1.06-1.061l5.043-5.043a.251.251,0,0,0,0-.354l-6.2-6.2a.18.18,0,0,0-.2-.039A.182.182,0,0,0,0,6V18a2,2,0,0,0,2,2H22a2,2,0,0,0,2-2V6A.181.181,0,0,0,23.888,5.832Z\" })\n  ] })\n});\n\nexport {\n  EmailIcon\n};\n"],"names":["Button","type","children","isLoading","loadingText","colorScheme","color","bg","fontWeight","minW","HeadingSection","props","as","fontSize","textAlign","Input","name","icon","pointerEvents","InputChakra","paddingLeft","variant","borderColor","focusBorderColor","useMyToast","toast","useToast","title","position","duration","isClosable","description","status","render","p","borderRadius","ViewIcon","createIcon","displayName","path","jsxs","fill","jsx","d","cx","cy","r","initialValues","email","password","schema","yup","shape","required","dispatch","useDispatch","errorLogIn","useSelector","selectors","fetchLogIn","useEffect","clearErrors","justify","align","spacing","flexGrow","px","py","onSubmit","resetForm","signInUser","validationSchema","handleSubmit","errors","mx","maxW","isInvalid","I","boxSize","EmailIcon"],"sourceRoot":""}